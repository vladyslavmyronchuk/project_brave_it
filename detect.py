import serial
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import serial.tools.list_ports
from dotenv import load_dotenv
import os
import json
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

from aiogram.types import FSInputFile

load_dotenv()

TOKEN = os.getenv("TOKEN")
BAUD_RATE = 9600
DATA_FILE = "sensor_data.json"  

class TelegramBot:
    def __init__(self, token):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.user_ports = {}  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ä—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.serial_connections = {}  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Ä—ñ–π–Ω–∏—Ö –∑'—î–¥–Ω–∞–Ω—å

        self.dp.message.register(self.start, Command("start"))
        self.dp.message.register(self.connect_device, Command("connect_device"))
        self.dp.message.register(self.get_data, Command("info"))
        self.dp.message.register(self.get_port, Command("getport"))
        self.dp.message.register(self.stat, Command("stat"))
        self.dp.message.register(self.graph, Command("graph"))
        self.dp.message.register(self.unknown_command)
        self.dp.callback_query.register(self.handle_callback)

    async def set_bot_commands(self):
        commands = [
            types.BotCommand(command="start", description="üî∞ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            types.BotCommand(command="connect_device", description="üîå –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π"),
            types.BotCommand(command="info", description="‚Ñπ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ"),
            types.BotCommand(command="getport", description="üñ• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ä—Ç–∏"),
            types.BotCommand(command="stat", description="üìä –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏"),
            types.BotCommand(command="graph", description="üìà –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫")
        ]
        await self.bot.set_my_commands(commands)

    async def start(self, message: Message):
        markup = types.InlineKeyboardMarkup(inline_keyboard=[ 
            [types.InlineKeyboardButton(text="üîå –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –¥–µ–≤–∞–π—Å", callback_data="connect_device")]
        ])
        await message.answer("–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ç–µ—Ä–º–æ–≥—ñ–≥—Ä–æ–º–µ—Ç—Ä, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=markup)

    async def handle_callback(self, callback: CallbackQuery):
        if callback.data == "connect_device":
            await self.connect_device(callback)
        elif callback.data == "stat_5minutes":
            await self.show_statistics(callback.message, timedelta(minutes=5))
        elif callback.data == "stat_1hour":
            await self.show_statistics(callback.message, timedelta(hours=1))
        elif callback.data == "stat_4hours":
            await self.show_statistics(callback.message, timedelta(hours=4))
        elif callback.data == "stat_12hours":
            await self.show_statistics(callback.message, timedelta(hours=12))
        elif callback.data == "graph_5minutes":
            await self.send_graph(callback.message, timedelta(minutes=5))
        elif callback.data == "graph_30minutes":
            await self.send_graph(callback.message, timedelta(minutes=30))
        elif callback.data == "graph_3hours":
            await self.send_graph(callback.message, timedelta(hours=3))
        elif callback.data == "graph_12hours":
            await self.send_graph(callback.message, timedelta(hours=12))


    async def get_port(self, message: Message):
        ports = serial.tools.list_ports.comports()
        usb_ports = [port for port in ports if 'USB' in port.description]
        for port in usb_ports:
            await message.answer(f"–ù–∞–∑–≤–∞ –ø–æ—Ä—Ç—É:{port.device}, –û–ø–∏—Å: {port.description}")

    async def connect_device(self, event):
        user_id = event.from_user.id
        message = event.message if isinstance(event, CallbackQuery) else event
        ports = serial.tools.list_ports.comports()
        usb_ports = [port for port in ports if 'USB' in port.description]

        if not usb_ports:
            await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö USB –ø–æ—Ä—Ç—ñ–≤!")
            return

        for port in usb_ports:
            try:
                ser = serial.Serial(port.device, BAUD_RATE, timeout=3, write_timeout=1, dsrdtr=False, rtscts=False)
                ser.dtr = False
                ser.rts = False
                ser.flushInput()

                self.user_ports[user_id] = port.device
                self.serial_connections[user_id] = ser

                await message.answer(f"‚úÖ –ü–æ—Ä—Ç {port.device} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!")

                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏—Å—Ç—Ä–æ—é
                asyncio.create_task(self.monitor_sensor(user_id))

                break

            except serial.SerialException:
                continue

        else:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±—É–¥—å-—è–∫–æ–≥–æ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ—Ä—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    async def get_data(self, message: Message):
        user_id = message.from_user.id
        if user_id not in self.serial_connections:
            await message.answer("‚ö† –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –ø–æ—Ä—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /connect_device, —â–æ–± –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π.")
            return

        ser = self.serial_connections[user_id]

        try:
            ser.flushInput()
            ser.write(b"GET\n")  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –¥–∞–Ω—ñ
            await asyncio.sleep(2)  # –ß–µ–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å

            info = ser.readline().decode().strip()
            print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ: {info}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è

            if not info:
                await message.answer("‚ùå –ü—Ä–∏—Å—Ç—Ä—ñ–π –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î!")
                return

            if info == "ERROR":
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –¥–∞—Ç—á–∏–∫–∞!")
                return

            parts = info.split()
            if len(parts) == 2:
                try:
                    temp, hum = map(float, parts)
                    response = f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\nüíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {hum}%"

                    
                    self.save_data_to_json(temp, hum)

                    await self.bot.send_message(user_id, response)
                except ValueError:
                    await self.bot.send_message(user_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π.")
            else:
                await self.bot.send_message(user_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–∏—Ö –≤—ñ–¥ –ü—Ä–∏—Å—Ç—Ä–æ—é!")

        except serial.SerialException:
            await self.bot.send_message(user_id, f"‚ùå –í—Ç—Ä–∞—á–µ–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ø–æ—Ä—Ç–æ–º {self.user_ports[user_id]}!")

    def save_data_to_json(self, temp, hum):
        data = {
            "timestamp": datetime.now().isoformat(),
            "temperature": temp,
            "humidity": hum
        }

        try:
            with open(DATA_FILE, "r") as file:
                all_data = json.load(file)
        except FileNotFoundError:
            all_data = []

        all_data.append(data)

        with open(DATA_FILE, "w") as file:
            json.dump(all_data, file, indent=4)

    async def monitor_sensor(self, user_id: int):
        while True:
            if user_id in self.serial_connections:
                ser = self.serial_connections[user_id]

                try:
                    ser.flushInput()
                    ser.write(b"GET\n")  # –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
                    await asyncio.sleep(2)  # –ß–µ–∫–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Arduino

                    info = ser.readline().decode().strip()
                    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ: {info}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è

                    if not info:
                        continue

                    if info == "ERROR":
                        continue

                    parts = info.split()
                    if len(parts) == 2:
                        try:
                            temp, hum = map(float, parts)  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ —á–∏—Å–ª–∞
                            self.save_data_to_json(temp, hum)

                            # –Ø–∫—â–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∞–±–æ –≤–æ–ª–æ–≥—ñ—Å—Ç—å –≤–∏—Ö–æ–¥—è—Ç—å –∑–∞ –º–µ–∂—ñ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                            if temp > 27 or hum < 35:
                                await self.bot.send_message(user_id, f"‚ö† –£–≤–∞–≥–∞: –ü—ñ–¥–≤–∏—â–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ({temp}¬∞C) –∞–±–æ –Ω–∏–∑—å–∫–∞ –≤–æ–ª–æ–≥—ñ—Å—Ç—å ({hum}%)!")

                            if temp < 18 or hum > 70:
                                await self.bot.send_message(user_id, f"‚ö† –£–≤–∞–≥–∞: –ù–∏–∑—å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ({temp}¬∞C) –∞–±–æ –≤–∏—Å–æ–∫–∞ –≤–æ–ª–æ–≥—ñ—Å—Ç—å ({hum}%)!")

                        except ValueError:
                            continue

                except serial.SerialException:
                    continue

            await asyncio.sleep(10)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥

    async def stat(self, message: Message):
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìÖ –ó–∞ 5 —Ö–≤–∏–ª–∏–Ω", callback_data="stat_5minutes")],
            [types.InlineKeyboardButton(text="üìÖ –ó–∞ 1 –≥–æ–¥–∏–Ω—É", callback_data="stat_1hour")],
            [types.InlineKeyboardButton(text="üìÖ –ó–∞ 4 –≥–æ–¥–∏–Ω–∏", callback_data="stat_4hours")],
            [types.InlineKeyboardButton(text="üìÖ –ó–∞ 12 –≥–æ–¥–∏–Ω", callback_data="stat_12hours")]
        ])
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–µ—Ä–µ–ª—è–¥—É —Å–µ—Ä–µ–¥–Ω—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤üìÖ:", reply_markup=markup)

   
    async def show_statistics(self, message: Message, time_range: timedelta):
        try:
            with open(DATA_FILE, "r") as file:
                all_data = json.load(file)
        except FileNotFoundError:
            await message.answer("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
            return

        now = datetime.now()
        filtered_data = [entry for entry in all_data if now - datetime.fromisoformat(entry["timestamp"]) <= time_range]

        if not filtered_data:
            await message.answer("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥!")
            return

        avg_temp = sum(entry["temperature"] for entry in filtered_data) / len(filtered_data)
        avg_hum = sum(entry["humidity"] for entry in filtered_data) / len(filtered_data)

        await message.answer(f"üìä –°–µ—Ä–µ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.2f}¬∞C\nüíß –°–µ—Ä–µ–¥–Ω—è –≤–æ–ª–æ–≥—ñ—Å—Ç—å: {avg_hum:.2f}%")

    async def graph(self, message: Message):
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìà –ó–∞ 5 —Ö–≤–∏–ª–∏–Ω", callback_data="graph_5minutes")],
            [types.InlineKeyboardButton(text="üìà –ó–∞ 30 —Ö–≤–∏–ª–∏–Ω", callback_data="graph_30minutes")],
            [types.InlineKeyboardButton(text="üìà –ó–∞ 3 –≥–æ–¥–∏–Ω–∏", callback_data="graph_3hours")],
            [types.InlineKeyboardButton(text="üìà –ó–∞ 12 –≥–æ–¥–∏–Ω", callback_data="graph_12hours")]
        ])
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞:", reply_markup=markup)

    async def send_graph(self, message: Message,time_range:timedelta):
        graph_file = self.plot_graph(time_range)
        if graph_file:
            photo = FSInputFile(graph_file)
            await message.answer_photo(photo)
        else:
            await message.answer("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞!")
            

    def plot_graph(self, time_range: timedelta):
        try:
            with open(DATA_FILE, "r") as file:
                all_data = json.load(file)
        except FileNotFoundError:
            return None

        now = datetime.now()
        filtered_data = [entry for entry in all_data if now - datetime.fromisoformat(entry["timestamp"]) <= time_range]

        if not filtered_data:
            return None

        try:
            timestamps = [datetime.strptime(entry["timestamp"], "%Y-%m-%dT%H:%M:%S.%f") for entry in filtered_data]
        except ValueError:
            timestamps = [datetime.strptime(entry["timestamp"], "%Y-%m-%dT%H:%M:%S") for entry in filtered_data]

        temperatures = [entry["temperature"] for entry in filtered_data]
        humidities = [entry["humidity"] for entry in filtered_data]

        fig, ax1 = plt.subplots()
        ax1.set_xlabel('–ß–∞—Å')
        ax1.set_ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', color='tab:red')
        ax1.plot(timestamps, temperatures, color='tab:red', label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
        ax1.tick_params(axis='y', labelcolor='tab:red')

        ax2 = ax1.twinx()
        ax2.set_ylabel('–í–æ–ª–æ–≥—ñ—Å—Ç—å (%)', color='tab:blue')
        ax2.plot(timestamps, humidities, color='tab:blue', label="–í–æ–ª–æ–≥—ñ—Å—Ç—å")
        ax2.tick_params(axis='y', labelcolor='tab:blue')

        ax1.xaxis.set_major_locator(mdates.AutoDateLocator())
        ax1.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
        plt.xticks(rotation=45, ha="right")
        fig.tight_layout()

        graph_filename = "sensor_graph.png"
        plt.savefig(graph_filename)
        plt.close()

        return graph_filename
    
    
    async def unknown_command(self, message: Message):
        await message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /info ,/connect_device,/getport,/graph,/stat")

    async def run(self):
        await self.set_bot_commands()  # –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω—é
        await self.dp.start_polling(self.bot)


if __name__ == "__main__":
    bot = TelegramBot(TOKEN)
    asyncio.run(bot.run())
